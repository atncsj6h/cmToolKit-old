#! /usr/bin/env bash

#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   str="lll.mmm.nnn"
#
#   echo "the shortest name         ${str%%.*}"
#   echo "the longest  name         ${str%.*}"
#
#   echo "the shortest extension    ${str##*.}"
#   echo "the longest  extension    ${str#*.}"
#
#   exit
#

#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
function _yesno() {
    for ((;;)) ; do
        echo "${_self} - Enter [y](ENTER) to continue"
        echo "${_self} -       [n/q]      to Exit"
        read z
        if [ "${z}". == . ] ; then
            return 0
        fi
        z=${z:0:1}
        z="`echo -E "${z}" | tr [:upper:] [:lower:]`"
        case ${z} in
            y) return 0
                ;;
            n) return 1
                ;;
            q) return 1
                ;;
        esac
    done
}

#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
quote() {
    echo "$1" | sed -e "s|'|'\\\\''|g; 1s/^/'/; \$s/\$/'/"
}

#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
_self="`basename ${0}`"
_self="${_self%%.*}"

root=$(dirname  $(pwd) )
here=$(basename $(pwd) )

here=$(pwd)

defs=""
args=""

make=""

#   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
while [[ $# -gt 0 ]] ; do


    flag=$(printf "%s" $1 | tr [:upper:] [:lower:])

    #flag="${flag%=*}"
    #flag="${flag%:*}"
    #case "${flag:0:2}" in

    case "${flag}" in

        -y | -yes | --yes )
            yes="y"
            shift
            continue
            ;;

        -m | -make | --make )
            make=""
            shift
            continue
            ;;

        -n | -ninja | --ninja )
            make="-G Ninja"
            shift
            continue
            ;;

        -1 | -release | --release )
            build="Release"
            shift
            continue
            ;;

        -2 | -debinfo | --debinfo )
            build="RelWithDebInfo"
            shift
            continue
            ;;

        -3 | -debug | --debug )
            build="Debug"
            shift
            continue
            ;;

        -g | -global | --global )
            prefix="/usr/local"
            shift
            continue
            ;;

        -s | -source | --source )
            source="${2}"
            shift 2
            continue
            ;;

        "-s="* | "-source="* | "--source="* )
            source="${1#*=}"
            shift
            continue
            ;;

        -p | -prefix | --prefix )
            prefix="${2}"
            shift 2
            continue
            ;;

        "-p="* | "-prefix="* | "--prefix="* )
            prefix="${1#*=}"
            shift
            continue
            ;;

    esac

    case "${flag:0:2}" in
        -z )
            defs="$defs -U${1:2}"
            shift
            continue
            ;;

        -u )
            defs="$defs -D${1:2}:BOOL=FALSE"
            shift
            continue
            ;;

        -d )
            if [ "${1%=*}". == "${1#*=}". ] ; then
                defs="$defs -D${1:2}:BOOL=TRUE"
            else
                z="${1:2}"
                defs="$defs -D${z%=*}:STRING=${z#*=}"
            fi
            shift
            continue
            ;;
    esac

    args="$args $1"

    shift

done

# echo "here $here"
# echo "prefix ${here%%.*}"
# echo "source ${here%.*}"

if  [ "${build}". == "".  ] ; then
    build="Release"
fi

for i in 1 ; do
    if  [ "${source}". == "".  ] ; then
        if  test -f "${here%.*}/CMakeLists.txt" ; then
            source="${here%.*}"
            break
        fi
        SUFS=".src .git .svn"
        for suf in ${SUFS} ; do
            if  test -f "${here%.*}${suf}/CMakeLists.txt" ; then
                source="${here%.*}${suf}"
                break
            fi
        done
    fi
done
if  [ "${source}". == "".  ] ; then
    echo "unable to determine the source directory from ${here} "
    exit
fi
if  ! test -d "${source}" ; then
    echo "source directory not found '${source}' "
    exit
fi

if  [ "${prefix}". == "".  ] ; then
    prefix=${source%.*}
fi

CMAKE="cmake "${make}

#   CMAKE="${CMAKE} -DCMAKE_EXPORT_COMPILE_COMMANDS=1"

if  [ "${prefix}". != "".  ] ; then
    CMAKE="${CMAKE} -DCMAKE_INSTALL_PREFIX=${prefix}"
fi

if  [ "${build}". != "".  ] ; then
    CMAKE="${CMAKE} -DCMAKE_BUILD_TYPE=${build}"
fi

echo "${_self} - $CMAKE ${defs} ${args} $source"

if  [ -z ${yes} ] ; then
    _yesno
    RC=$?
    if [ ${RC} -eq 1 ] ; then
        echo "${_self} - canceled"
        exit
    fi
fi
$CMAKE ${defs} ${args} $source

RC=$?

if [ ${RC} -ne 0 ] ; then
    echo "${_self} - failed"
fi

exit

